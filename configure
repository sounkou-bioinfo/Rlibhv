#!/bin/bash
# configure libhv and its dependencies for R Libhv
# For now this works on Linux by building libhv dependencies from source.
# and using openSSL if available.
# For macOS, there is no ssl since libhv depends on nghttp2 which requires OpenSSL.
# for ssl support, you need to install OpenSSL via Homebrew
# For some reason, libressl messes with pkg-config and openssl
# nghttp2 release build steps are much cleaner and test properly openssl/wolfssl
# i don t have a macOS machine, so I cannot test this script on macOS except for the
# CI checks

# TODO : pass the R building AC, RANLIB, AR, CC etc
#        remove detritus from the script for the check

set -eou

PKG_CONFIG_PATH=$(which pkg-config)

export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:$PKG_CONFIG_PATH"

# Get R_HOME 
: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
  echo "Could not determine R_HOME"
  exit 1
fi

#---- some sanity checks ----
if ! command -v pkg-config >/dev/null 2>&1; then
  echo "pkg-config is not installed. Please install it to proceed."
  exit 1
fi
if ! command -v make >/dev/null 2>&1; then
  echo "make is not installed. Please install it to proceed."
  exit 1
fi
# zlib is required for nghttp2
if pkg-config --exists zlib; then
  echo "zlib found, proceeding with configuration"
else
  echo "zlib not found. Please install zlib development files to proceed."
  exit 1
fi
# check libcurl
if pkg-config --exists libcurl; then
  echo "libcurl found, proceeding with configuration"
else
  echo "libcurl not found. Please install libcurl development files to proceed."
  exit 1
fi
#------ Variables and Paths ------
PACKAGE_DIR=$(cd "$(dirname "$0")"; pwd)
INST_DIR="${PACKAGE_DIR}/inst"
# Check for OpenSSL using pkg-config
# some additional sanity checks for libressl stuff
OPENSSL_CONFIG=""
NGHTTP2_OPENSSL_CONFIG=""
LIB_OPENSSL=$(pkg-config --libs openssl 2>/dev/null || true)
OPENSSL_CFLAGS=$(pkg-config --cflags openssl 2>/dev/null || true)
if pkg-config --exists openssl; then
  echo "OpenSSL found with pkg-config, enabling OpenSSL support"
  OPENSSL_CONFIG="--with-openssl"
  NGHTTP2_OPENSSL_CONFIG="--with-openssl"
else
  echo "OpenSSL not found with pkg-config, please configure with --without-openssl"
  OPENSSL_CONFIG="--without-openssl"
  OPENSSL_CFLAGS=""
  LIB_OPENSSL=""
fi

# Ensure inst directory exists
mkdir -p "${INST_DIR}/lib"
mkdir -p "${INST_DIR}/include"


echo "=== Building dependencies for libhv ==="

#----- 1. Build and install libev for nhttp2
# this works on Linux and macOS as far as I tested

echo "Building libev..."

cd "${PACKAGE_DIR}/src/libev" || exit 1

CFLAGS="-fPIC" CXXFLAGS="-fPIC" \
./configure --prefix="${INST_DIR}/ev" \
--disable-shared --enable-static

make
make install

cd "${PACKAGE_DIR}" || exit 1

#--- 2. Build and install c-ares

echo "Building c-ares..."
cd "${PACKAGE_DIR}/src/c-ares" || exit 1
CFLAGS="-fPIC" CXXFLAGS="-fPIC" ./configure --prefix="${INST_DIR}/cares" --disable-tests --disable-shared --enable-static
make
make install
cd "${PACKAGE_DIR}" || exit 1

#----- 3. Build and install nghttp2

echo "Building nghttp2..."
cd "${PACKAGE_DIR}/src/nghttp2" || exit 1
# Only build the library component, disable tests and examples
# Pass the paths to libev and c-ares explicitly
# notes : nghttp2 properly tests openssl/wolfssl

CFLAGS="-I${INST_DIR}/include -I${INST_DIR}/ev/include -I${INST_DIR}/cares/include -fPIC" \
CXXFLAGS="-I${INST_DIR}/include -I${INST_DIR}/ev/include -I${INST_DIR}/cares/include -fPIC" \
LDFLAGS="-L${INST_DIR}/lib -L${INST_DIR}/cares/lib -L${INST_DIR}/ev/lib" \
LIBEV_CFLAGS="-I${INST_DIR}/include/ev -fPIC" \
LIBEV_LIBS="-L${INST_DIR}/ev/lib -lev" \
LIBCARES_CFLAGS="-I${INST_DIR}/cares/include -fPIC" \
LIBCARES_LIBS="-L${INST_DIR}/cares/lib -lcares" \
./configure --prefix="${INST_DIR}" \
  --disable-shared --enable-static \
  --disable-examples --disable-app \
  --disable-threads \
  --with-zlib -\
  -enable-lib-only "${NGHTTP2_OPENSSL_CONFIG}" \
  --with-libev=yes \
  --with-libcares=yes \
  PKG_CONFIG_PATH="${INST_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH"

# Build with a single process to avoid potential race conditions
make
make install
cd "${PACKAGE_DIR}" || exit 1

#----- 4. Configure and build libhv


echo "Building libhv..."

cd "${PACKAGE_DIR}/src/libhv" || exit 1

# Ensure libhv can find nghttp2 headers and libraries
export CFLAGS="-I${INST_DIR}/include ${OPENSSL_CFLAGS}"
export CXXFLAGS="-I${INST_DIR}/include ${OPENSSL_CFLAGS}"

export LDFLAGS="-L${INST_DIR}/lib -Wl,-rpath,${INST_DIR}/lib"

export PKG_CONFIG_PATH="${INST_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH"

# Configure libhv with dependency paths

./configure \
--with-nghttp2 \
--with-curl "${OPENSSL_CONFIG}" \
--enable-uds \
--prefix="${INST_DIR}"


make \
  CFLAGS="-I${INST_DIR}/include ${OPENSSL_CFLAGS}" \
  CXXFLAGS="-I${INST_DIR}/include ${OPENSSL_CFLAGS}" \
  LDFLAGS="-L${INST_DIR}/lib -fPIC -lnghttp2 -lcurl $LIB_OPENSSL"


make install || true

# Return to the package root directory
cd "${PACKAGE_DIR}" || exit 1

# Create Makevars from Makevars.in
sed -e "s|@INST_DIR@|${INST_DIR}|g" \
    -e "s|@SSL@|${LIB_OPENSSL}|g" \
    -e "s|@SSL_CFLAGS@|${OPENSSL_CFLAGS}|g" src/Makevars.in > src/Makevars
echo "=== Configuration complete ==="
# TODO remove detritus to make R CMD check happy
exit 0
